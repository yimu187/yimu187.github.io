{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["black","width","height","backgroundColor","standart","selected","success","questionsDataX","s","sn","c","ybas","ybit","xbas","xbit","questionsDataY","App","inputs","Array","fill","map","state","enteredChars","questionsX","questionsY","clickedXIndex","clickedYIndex","modelWindowOpen","generateChars","maxX","_this","getMaxXNum","maxY","getMaxYNum","i","length","qData","enteredXChars","xIndex","max","onFieldValueChange","field","event","indexArr","id","split","indexY","parseInt","indexX","enteredValue","value","substr","toUpperCase","focusedItemX","focusedItemY","resultChar","focus","newClickedXIndex","newClickedYIndex","questionData","allEqual","enteredCharX","word","j","setState","onXItemClicked","index","onYItemClicked","getCss","xArr","yAxisArr","push","getTransparent","onModalWindowClose","getLabelInfo","result","onInputFocus","this","_this2","react_default","a","createElement","className","Grid","columns","doubling","Column","dataY","item","Input","transparent","style","label","labelPosition","onChange","ref","input","List","question","Item","onClick","bind","Label","Modal","open","centered","onClose","size","Header","Content","Description","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAIMA,UAAQ,CAACC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiB,UACzDC,EAAW,CAACH,MAAO,OAAQC,OAAQ,QACnCG,EAAW,CAACJ,MAAO,OAAQC,OAAQ,OAAQC,gBAAiB,WAC5DG,EAAU,CAACL,MAAO,OAAQC,OAAQ,OAAQC,gBAAiB,SAqC3DI,EAAiB,CACnB,CAACC,EAAE,mBAAcC,GAAG,GAAIC,GAAG,EAAGC,MAAO,EAAGC,MAAO,EAAGC,MAAO,EAAGC,MAAM,GAClE,CAACN,EAAE,iNAAmKC,GAAG,EAAGC,EAAE,aAASC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACvN,CAACN,EAAE,aAASC,GAAG,EAAGC,EAAE,KAAMC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC1D,CAACN,EAAE,oBAAgBC,GAAG,EAAGC,EAAE,eAAWC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACtE,CAACN,EAAE,0BAAgBC,GAAG,EAAGC,EAAE,KAAMC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACjE,CAACN,EAAE,YAAaC,GAAG,EAAGC,EAAE,aAASC,KAAK,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAChE,CAACN,EAAE,wBAAYE,EAAE,WAAOD,GAAG,EAAGE,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC9D,CAACN,EAAE,2CAAmCC,GAAG,EAAGC,EAAE,OAAQC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACtF,CAACN,EAAE,KAAMC,GAAG,EAAGC,EAAE,iBAAQC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACzD,CAACN,EAAE,uBAAkBC,GAAG,EAAGC,EAAE,WAAOC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACpE,CAACN,EAAE,+BAAwBC,GAAG,GAAIC,EAAE,MAAOC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC3E,CAACN,EAAE,6BAA8BC,GAAG,GAAIC,EAAE,UAAMC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAChF,CAACN,EAAE,WAAYC,GAAG,GAAIC,EAAE,cAAUC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAClE,CAACN,EAAE,iCAA6BC,GAAG,GAAIC,EAAE,gBAAOC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAChF,CAACN,EAAE,cAAYC,GAAG,GAAIC,EAAE,MAAOC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,IAI7DC,EAAiB,CACnB,CAACP,EAAG,wCAAqBC,GAAG,GAAIC,GAAG,EAAGC,MAAO,EAAGC,MAAO,EAAGC,MAAO,EAAGC,MAAM,GAC1E,CAACN,EAAE,gDAAmBC,GAAG,EAAGC,EAAE,eAAWC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACzE,CAACN,EAAE,sBAAuBC,GAAG,EAAGC,EAAE,cAAUC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC5E,CAACN,EAAE,aAAcC,GAAG,GAAIC,EAAE,kBAASC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACnE,CAACN,EAAE,WAAYC,GAAG,GAAIC,EAAE,UAAMC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC9D,CAACN,EAAE,QAASC,GAAG,GAAIC,EAAE,KAAMC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC3D,CAACN,EAAE,+BAAiBC,GAAG,GAAIC,EAAE,aAASC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GACtE,CAACN,EAAE,QAASC,GAAG,GAAIC,EAAE,MAAOC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC5D,CAACN,EAAE,2CAA4BC,GAAG,GAAIC,EAAE,YAAQC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAChF,CAACN,EAAE,8CAAwBC,GAAG,GAAIC,EAAE,iBAAQC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC5E,CAACN,EAAE,YAAaC,GAAG,GAAIC,EAAE,UAAMC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC/D,CAACN,EAAE,oCAA4BC,GAAG,GAAIC,EAAE,OAAQC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAChF,CAACN,EAAE,WAAYC,GAAG,GAAIC,EAAE,KAAMC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,GAC9D,CAACN,EAAE,kEAAiDC,GAAG,GAAIC,EAAE,cAAUC,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAK,IAmiB5FE,6MA/hBXC,OAASC,MAAM,GAAGC,KAAK,MAAMC,IAAI,kBAAIF,MAAM,GAAGC,KAAK,UAEnDE,MAAQ,CACJC,aAAe,GACfC,WAAYhB,EACZiB,WAAYT,EACZU,eAAiB,EACjBC,eAAiB,EACjBC,iBAAiB,KAgCrBC,cAAgB,SAACrB,EAAgBQ,GAM7B,IALA,IAAMc,EAAOC,EAAKC,WAAWxB,GACvByB,EAAOF,EAAKG,WAAWlB,GAEzBO,EAAeJ,MAAMc,EAAO,GAAGb,MAAM,GAAGC,IAAI,kBAAIF,MAAMW,EAAO,GAAGV,MAAM,KAElEe,EAAI,EAAGA,EAAI3B,EAAe4B,OAAQD,IAAI,CAC1C,IAAME,EAAQ7B,EAAe2B,GAE7B,IAAmB,IAAhBE,EAAMtB,OAA+B,IAAhBsB,EAAMvB,OAA+B,IAAhBuB,EAAMzB,OAA+B,IAAhByB,EAAMxB,KAOpE,IANA,IAAMC,EAAOuB,EAAMvB,KACbC,EAAOsB,EAAMtB,KAGfuB,EAAgBf,EAFLc,EAAMzB,MAIbuB,EAAIrB,EAAMqB,GAAKpB,EAAMoB,IACzBG,EAAcH,GAAK,GAK/B,IAAI,IAAIA,EAAI,EAAGA,EAAInB,EAAeoB,OAAQD,IAAI,CAC1C,IAAME,EAAQrB,EAAemB,GAE7B,IAAmB,IAAhBE,EAAMtB,OAA+B,IAAhBsB,EAAMvB,OAA+B,IAAhBuB,EAAMzB,OAA+B,IAAhByB,EAAMxB,KAKpE,IAJA,IAAMD,EAAOyB,EAAMzB,KACbC,EAAOwB,EAAMxB,KACb0B,EAASF,EAAMvB,KAEbqB,EAAIvB,EAAMuB,GAAKtB,EAAMsB,IACzBZ,EAAaY,GAAGI,GAAU,GAKtC,OAAOhB,KAGXS,WAAa,SAACxB,GAEV,IADA,IAAIgC,EAAI,EACAL,EAAI,EAAGA,EAAI3B,EAAe4B,OAAQD,IAAI,CAC1C,IACMpB,EADMP,EAAe2B,GACRpB,KACnByB,EAAMzB,EAAOyB,EAAMzB,EAAOyB,EAE9B,OAAOA,KAGXN,WAAa,SAAClB,GAEV,IADA,IAAIwB,EAAI,EACAL,EAAI,EAAGA,EAAInB,EAAeoB,OAAQD,IAAI,CAC1C,IACMpB,EADMC,EAAemB,GACRtB,KACnB2B,EAAMzB,EAAOyB,EAAMzB,EAAOyB,EAE9B,OAAOA,KAGXC,mBAAqB,SAACC,EAAOC,GACzB,IAAMjB,EAAgBK,EAAKT,MAAMI,cAC3BC,EAAgBI,EAAKT,MAAMK,cAC3BH,EAAaO,EAAKT,MAAME,WACxBC,EAAaM,EAAKT,MAAMG,WAC1BF,EAAeQ,EAAKT,MAAMC,aAGxBqB,EADKD,EAAME,GACGC,MAAM,KACpBC,EAASC,SAASJ,EAAS,IAC3BK,EAASD,SAASJ,EAAS,IAE3BM,EAAeP,EAAMQ,MACvBf,EAASc,EAAad,OACpBe,EAAQf,EAAS,EAAqB,MAAjBc,EAAuBA,EAAaE,OAAOhB,EAAS,EAAGA,GAAQiB,cAAgB,SAAM,GAChH9B,EAAawB,GAAQE,GAAUE,EAE/B,IAAMG,EAAe5B,EAAgB,GAAKuB,EAAS,EAAI1B,EAAawB,GAAQX,OAASa,EAAS,EAAIA,EAC9FM,EAAe5B,EAAgB,GAAKoB,EAAS,EAAIxB,EAAa0B,GAAQb,OAASW,EAAS,EAAIA,EAC1FS,EAAajC,EAAagC,GAAcD,GAEjC,KAAVH,IAAgC,IAAhBK,GACIzB,EAAKb,OAAOqC,GAAcD,GACnCG,QAGd,IAAIC,GAAoB,EACpBC,GAAoB,EACxB,GAAGjC,EAAgB,EACf,IAAI,IAAIS,EAAI,EAAGA,EAAIX,EAAWY,OAAQD,IAAI,CACtC,IAAMyB,EAAepC,EAAWW,GAChC,GAAGY,IAAWa,EAAahD,MAAQqC,GAAUW,EAAa7C,MAAQkC,GAAUW,EAAa9C,KAAK,CAC1F4C,EAAmBvB,EACnB,YAIN,GAAGR,EAAgB,EACrB,IAAI,IAAIQ,EAAI,EAAGA,EAAIV,EAAWW,OAAQD,IAAI,CACtC,IAAMyB,EAAenC,EAAWU,GAChC,GAAGc,IAAWW,EAAa9C,MAAQiC,GAAUa,EAAa/C,MAAQkC,GAAUa,EAAahD,KAAK,CAC1F+C,EAAmBxB,EACnB,OAQZ,IADA,IAAI0B,GAAY,EACR1B,EAAI,EAAGA,EAAIX,EAAWY,OAAQD,IAAI,CACtC,IAAIE,EAAQb,EAAWW,GAEnBvB,EAAOyB,EAAMzB,KACbE,EAAOuB,EAAMvB,KACbC,EAAOsB,EAAMtB,KAEjB,IAAa,IAAVH,IAAyB,IAAVE,IAAyB,IAAVC,EAAjC,CAOA,IAHA,IAAI+C,EAAevC,EAAaX,GAE5BmD,EAAO,GACHC,EAAIlD,EAAMkD,GAAKjD,EAAMiD,IACzBD,GAAQD,EAAaE,GAIzB,KADAH,EAAWE,IAAS1B,EAAM1B,GAEtB,OAIR,GAAGkD,EACC,IAAI,IAAI1B,EAAI,EAAGA,EAAIV,EAAWW,OAAQD,IAAI,CACtC,IAAIE,EAAQZ,EAAWU,GAEnBrB,EAAOuB,EAAMvB,KACbF,EAAOyB,EAAMzB,KACbC,EAAOwB,EAAMxB,KAEjB,IAAa,IAAVD,IAAyB,IAAVE,IAAyB,IAAVD,EAAjC,CAKA,IADA,IAAIkD,EAAO,GACHC,EAAIpD,EAAMoD,GAAKnD,EAAMmD,IACzBD,GAAQxC,EAAayC,GAAGlD,GAI5B,KADA+C,EAAWE,IAAS1B,EAAM1B,GAEtB,OAKZoB,EAAKkC,SAAS,CACV1C,eACAG,cAAgBgC,EAChB/B,cAAgBgC,EAChB/B,gBAAkBiC,OAK1BK,eAAiB,SAACC,GACd,IAAM5C,EAAeQ,EAAKT,MAAMC,aAChCQ,EAAKkC,SAAS,CACVvC,cAAgByC,EAChBxC,eAAiB,EACjBJ,oBAIR6C,eAAiB,SAACD,GACd,IAAM5C,EAAeQ,EAAKT,MAAMC,aAChCQ,EAAKkC,SAAS,CACVtC,cAAgBwC,EAChBzC,eAAiB,EACjBH,oBAIR8C,OAAS,SAACpB,EAAQF,GAUd,IATA,IAAMrB,EAAgBK,EAAKT,MAAMI,cAC3BC,EAAgBI,EAAKT,MAAMK,cAC3BJ,EAAeQ,EAAKT,MAAMC,aAC1BC,EAAaO,EAAKT,MAAME,WACxBC,EAAaM,EAAKT,MAAMG,WAI1BmC,EAAe,KACVzB,EAAI,EAAGA,EAAIX,EAAWY,OAAQD,IAAI,CACvC,IAAIE,EAAQb,EAAWW,GACvB,GAAGE,EAAMvB,MAAQmC,GAAUZ,EAAMtB,MAAQkC,GAAUF,IAAWV,EAAMzB,KAAK,CACrEgD,EAAevB,EACf,OAIR,IAAI0B,EAAO,GACX,GAAmB,MAAhBH,EAEC,IADA,IAAMU,EAAQ/C,EAAaqC,EAAahD,MAChCuB,EAAIyB,EAAa9C,KAAMqB,GAAKyB,EAAa7C,KAAMoB,IACnD4B,GAAQO,EAAKnC,GAGrB,GAAoB,OAAjByB,GAAyBG,IAASH,EAAajD,EAC9C,OAAOJ,EAIXqD,EAAe,KACf,IAAI,IAAKzB,EAAI,EAAGA,EAAIV,EAAWW,OAAQD,IAAI,CACvC,IAAIE,EAAQZ,EAAWU,GACvB,GAAGE,EAAMzB,MAAQmC,GAAUV,EAAMxB,MAAQkC,GAAUE,IAAWZ,EAAMvB,KAAK,CACrE8C,EAAevB,EACf,OAKR,GADA0B,EAAO,GACY,MAAhBH,EAAqB,CAEpB,IADA,IAAIW,EAAW,GACPpC,EAAI,EAAGA,EAAIZ,EAAaa,OAAQD,IACpCoC,EAASC,KAAKjD,EAAaY,GAAGyB,EAAa9C,OAE/C,IAAI,IAAIqB,EAAIyB,EAAahD,KAAMuB,GAAKyB,EAAa/C,KAAMsB,IACnD4B,GAAQQ,EAASpC,GAIzB,OAAoB,OAAjByB,GAAyBG,IAASH,EAAajD,EACvCJ,EAGRmB,EAAgB,EAEkB,OAA9BF,EAAWE,IAA2BF,EAAWE,GAAeZ,MAAQmC,GAAUzB,EAAWE,GAAeX,MAAQkC,GAAUF,IAAWvB,EAAWE,GAAed,KAC3JN,EAEAD,EAENsB,EAAgB,GACY,OAA9BF,EAAWE,IAA2BF,EAAWE,GAAef,MAAQmC,GAAUtB,EAAWE,GAAed,MAAQkC,GAAUE,IAAWxB,EAAWE,GAAeb,KAC3JR,EAKJD,KAIfoE,eAAiB,SAACxB,EAAQF,GAStB,IARA,IAAMrB,EAAgBK,EAAKT,MAAMI,cAC3BC,EAAgBI,EAAKT,MAAMK,cAC3BH,EAAaO,EAAKT,MAAME,WACxBC,EAAaM,EAAKT,MAAMG,WACxBF,EAAeQ,EAAKT,MAAMC,aAG5BqC,EAAe,KACVzB,EAAI,EAAGA,EAAIX,EAAWY,OAAQD,IAAI,CACvC,IAAIE,EAAQb,EAAWW,GACvB,GAAGE,EAAMvB,MAAQmC,GAAUZ,EAAMtB,MAAQkC,GAAUF,IAAWV,EAAMzB,KAAK,CACrEgD,EAAevB,EACf,OAIR,IAAI0B,EAAO,GACX,GAAmB,MAAhBH,EAEC,IADA,IAAMU,EAAQ/C,EAAaqC,EAAahD,MAChCuB,EAAIyB,EAAa9C,KAAMqB,GAAKyB,EAAa7C,KAAMoB,IACnD4B,GAAQO,EAAKnC,GAIrB,GAAoB,OAAjByB,GAAyBG,IAASH,EAAajD,EAC9C,OAAOJ,EAIXqD,EAAe,KACf,IAAI,IAAKzB,EAAI,EAAGA,EAAIV,EAAWW,OAAQD,IAAI,CACvC,IAAIE,EAAQZ,EAAWU,GACvB,GAAGE,EAAMzB,MAAQmC,GAAUV,EAAMxB,MAAQkC,GAAUE,IAAWZ,EAAMvB,KAAK,CACrE8C,EAAevB,EACf,OAKR,GADA0B,EAAO,GACY,MAAhBH,EAAqB,CAEpB,IADA,IAAIW,EAAW,GACPpC,EAAI,EAAGA,EAAIZ,EAAaa,OAAQD,IACpCoC,EAASC,KAAKjD,EAAaY,GAAGyB,EAAa9C,OAG/C,IAAI,IAAIqB,EAAIyB,EAAahD,KAAMuB,GAAKyB,EAAa/C,KAAMsB,IACnD4B,GAAQQ,EAASpC,GAIzB,OAAoB,OAAjByB,GAAyBG,IAASH,EAAajD,EACvCJ,EAGRmB,EAAgB,EACkB,OAA9BF,EAAWE,IAA2BF,EAAWE,GAAeZ,MAAQmC,GAAUzB,EAAWE,GAAeX,MAAQkC,GAAUF,IAAWvB,EAAWE,GAAed,KAKjKe,EAAgB,IACY,OAA9BF,EAAWE,IAA2BF,EAAWE,GAAef,MAAQmC,GAAUtB,EAAWE,GAAed,MAAQkC,GAAUE,IAAWxB,EAAWE,GAAeb,SAU9K4D,mBAAqB,WACjB3C,EAAKkC,SAAS,CACVrC,iBAAkB,OAI1B+C,aAAe,SAAC1B,EAAQF,GAMpB,IALA,IAAI6B,GAAS,EAEPpD,EAAaO,EAAKT,MAAME,WACxBC,EAAaM,EAAKT,MAAMG,WAEtBU,EAAI,EAAGA,EAAIX,EAAWY,OAAQD,IAAI,CACtC,IAAME,EAAQb,EAAWW,GAErBvB,EAAOyB,EAAMzB,KACbE,EAAOuB,EAAMvB,KAEjB,IAAa,IAAVA,IAAyB,IAAVF,IAIfA,IAASmC,GAAUjC,IAASmC,GAAO,CAClC2B,EAASvC,EAAM3B,GACf,OAIR,IAAIkE,EACA,IAAI,IAAIzC,EAAI,EAAGA,EAAIV,EAAWW,OAAQD,IAAI,CACtC,IAAME,EAAQZ,EAAWU,GAErBvB,EAAOyB,EAAMzB,KACbE,EAAOuB,EAAMvB,KAEjB,IAAa,IAAVA,IAAyB,IAAVF,IAIfA,IAASmC,GAAUjC,IAASmC,GAAO,CAClC2B,EAASvC,EAAM3B,GACf,OAKZ,OAAOkE,KAGXC,aAAe,SAAC5B,EAAQF,GAEpB,IAAMrB,EAAgBK,EAAKT,MAAMI,cAC3BC,EAAgBI,EAAKT,MAAMK,cAC7BH,EAAaO,EAAKT,MAAME,WACxBC,EAAaM,EAAKT,MAAMG,WAExBiC,GAAoB,EACpBC,GAAoB,EACxB,GAAGjC,EAAgB,EACf,IAAI,IAAIS,EAAI,EAAGA,EAAIX,EAAWY,OAAQD,IAAI,CACtC,IAAMyB,EAAepC,EAAWW,GAChC,GAAGY,IAAWa,EAAahD,MAAQqC,GAAUW,EAAa7C,MAAQkC,GAAUW,EAAa9C,KAAK,CAC1F4C,EAAmBvB,EACnB,YAIN,GAAGR,EAAgB,EACrB,IAAI,IAAIQ,EAAI,EAAGA,EAAIV,EAAWW,OAAQD,IAAI,CACtC,IAAMyB,EAAenC,EAAWU,GAChC,GAAGc,IAAWW,EAAa9C,MAAQiC,GAAUa,EAAa/C,MAAQkC,GAAUa,EAAahD,KAAK,CAC1F+C,EAAmBxB,EACnB,OAKZuB,EAAmBA,IAAqBhC,GAAiB,EAAIgC,EAC7DC,EAAmBA,IAAqBhC,GAAiB,EAAIgC,EAE7D5B,EAAKkC,SAAS,CACVvC,cAAegC,EACf/B,cAAegC,wFAtbnB,IAAMpC,EAAeuD,KAAKjD,cAAcrB,EAAgBQ,GAAgB,GAOxE8D,KAAKb,SACD,CAWI1C,aAAeA,EACfC,WAAYhB,EACZiB,WAAYT,EACZU,eAAiB,EACjBC,eAAiB,qCAoarB,IAAAoD,EAAAD,KACJ,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,QAAS,EAAGC,UAAQ,GACtBN,EAAAC,EAAAC,cAACE,EAAA,EAAKG,OAAN,KACKT,KAAKxD,MAAMC,aAAaF,IAAI,SAACmE,EAAOzC,GACjC,OACIiC,EAAAC,EAAAC,cAAA,WACKM,EAAMnE,IAAI,SAACoE,EAAMxC,GACd,OACc,IAAVwC,EACMT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAO7C,GAAIE,EAAS,IAAME,EAAQ0C,aAAW,EAACC,MAAO3F,EAAOkD,MAAO,KAErE6B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIG,MAAOd,EAAKJ,aAAa1B,EAAQF,GACjC+C,cAAc,cACdjD,GAAIE,EAAS,IAAME,EACnB0C,YAAaZ,EAAKN,eAAexB,EAAQF,GACzC6C,MAAOb,EAAKV,OAAOpB,EAAQF,GAC3BgD,SAAUhB,EAAKtC,mBAEfuD,IAAK,SAACC,GAAYlB,EAAK7D,OAAO6B,GAAQE,GAAUgD,GAChD9C,MAAOsC,UASvCT,EAAAC,EAAAC,cAACE,EAAA,EAAKG,OAAN,KAEIP,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACKpB,KAAKxD,MAAME,WAAWH,IAAI,SAAC8E,EAAUhC,GAClC,OACIY,EAAKzD,MAAMI,cAAgB,GAAKyC,IAAUY,EAAKzD,MAAMI,cAEjDsD,EAAAC,EAAAC,cAACgB,EAAA,EAAKE,KAAN,CAAWC,QAAStB,EAAKb,eAAeoC,KAAKvB,EAAMZ,IAC/Ca,EAAAC,EAAAC,cAACqB,EAAA,EAAD,SAASJ,EAASzF,GAAK,IAAMyF,EAAS1F,EAAtC,MAGJuE,EAAAC,EAAAC,cAACgB,EAAA,EAAKE,KAAN,CAAWC,QAAStB,EAAKb,eAAeoC,KAAKvB,EAAMZ,IAASgC,EAASzF,GAAK,IAAMyF,EAAS1F,OAM7GuE,EAAAC,EAAAC,cAACE,EAAA,EAAKG,OAAN,KAEIP,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACKpB,KAAKxD,MAAMG,WAAWJ,IAAI,SAAC8E,EAAUhC,GAClC,OACIY,EAAKzD,MAAMK,cAAgB,GAAKwC,IAAUY,EAAKzD,MAAMK,cAEjDqD,EAAAC,EAAAC,cAACgB,EAAA,EAAKE,KAAN,CAAWC,QAAStB,EAAKX,eAAekC,KAAKvB,EAAMZ,IAC/Ca,EAAAC,EAAAC,cAACqB,EAAA,EAAD,SAASJ,EAASzF,GAAK,IAAMyF,EAAS1F,EAAtC,MAGJuE,EAAAC,EAAAC,cAACgB,EAAA,EAAKE,KAAN,CAAWC,QAAStB,EAAKX,eAAekC,KAAKvB,EAAMZ,IAASgC,EAASzF,GAAK,IAAMyF,EAAS1F,QASjHuE,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,KAAM3B,KAAKxD,MAAMM,gBACjB8E,UAAU,EACVC,QAAS7B,KAAKJ,mBACdkC,KAAM,QAEV5B,EAAAC,EAAAC,cAACsB,EAAA,EAAMK,OAAP,4BACA7B,EAAAC,EAAAC,cAACsB,EAAA,EAAMM,QAAP,KACI9B,EAAAC,EAAAC,cAACsB,EAAA,EAAMO,YAAP,KACI/B,EAAAC,EAAAC,cAAA,8DAphBV8B,aCpEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0e3c0b34.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Input,Grid, List, Label, Modal} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst black = {width: '60px', height: '60px', backgroundColor: 'black'};\nconst standart = {width: '60px', height: '60px'};\nconst selected = {width: '60px', height: '60px', backgroundColor: '#B3B3B3'};\nconst success = {width: '60px', height: '60px', backgroundColor: 'green'};\n\n// const questionsDataX = [\n//     {s:'Soldan Sağa',sn:'', c:-1, ybas: -1, ybit: -1, xbas: -1, xbit:-1},\n//     {s:'Gırtlaktaki Aşırı ve Kronik İltihap', sn:1, c:'LARENJİT', ybas: 0, ybit: 0, xbas: 0, xbit:7},\n//     {s:'Jupiterin bir uydusu', sn:2, c:'ELARA', ybas: 1, ybit: 1, xbas: 0, xbit:4},\n//     {s:'Helyumun simgesi', sn:3, c:'HE', ybas: 1, ybit: 1, xbas: 6, xbit:7},\n//     {s:'Kesilen hayvanın böbrek, dalak, ciğer gibi iç organlarıyla baş ve ayakları',sn:4 ,c:'SAKATAT', ybas: 2, ybit: 2, xbas: 0, xbit:6},\n//     {s:'Bağırsaklar', sn:5, c:'EMA', ybas:3, ybit: 3, xbas: 0, xbit:2},\n//     {s:'Uzak',c:'IRAK', sn:6, ybas: 3, ybit: 3, xbas: 4, xbit:7},\n//     {s:'“...gibi” (Çok yumuşak, yumuşacık)', sn:7, c:'PAMUK', ybas: 4, ybit: 4, xbas: 0, xbit:4},\n//     {s:'Rutenyum Simgesi', sn:8, c:'RU', ybas: 4, ybit: 4, xbas: 6, xbit:7},\n//     {s:'En kısa zaman', sn:9, c:'AN', ybas: 5, ybit: 5, xbas: 0, xbit:1},\n//     {s:'Dili Tutulmuş', sn:10, c:'LAL', ybas: 5, ybit: 5, xbas: 3, xbit:5},\n//     {s:'Gidilen yol üzerinde olmayan', sn:11, c:'SAPA', ybas: 6, ybit: 6, xbas: 0, xbit:3},\n//     {s:'Yapma, Etme', sn:12, c:'İKA', ybas: 6, ybit: 6, xbas: 5, xbit:7},\n//     {s:'Davet etmek, çağırmak', sn:13, c:'OKUMAK', ybas: 7, ybit: 7, xbas: 2, xbit:7}\n//\n// ];\n//\n// const questionsDataY = [\n//     {s: 'Yukarıdan Aşağıya', sn:'', c:-1, ybas: -1, ybit: -1, xbas: -1, xbit:-1},\n//     {s:'Bir sınırdan geçebilmek için verilen yazılı izin', sn:1, c:'LESEPASE', ybas: 0, ybit: 7, xbas: 0, xbit:0},\n//     {s:'Büyük balıkçı kayığı', sn:14, c:'ALAMANA', ybas: 0, ybit: 6, xbas: 1, xbit:1},\n//     {s:'Sayıları göstermek için kullanılan işaretlerin her biri', sn:15, c:'RAKAM', ybas: 0, ybit: 4, xbas: 2, xbit:2},\n//     {s:'İtalyada bir nehir', sn:16, c:'PO', ybas: 6, ybit: 7, xbas: 2, xbit:2},\n//     {s:'Eski dilde otlar', sn:17, c:'ERA', ybas: 0, ybit: 2, xbas: 3, xbit:3},\n//     {s:'Haberci', sn:18, c:'ULAK', ybas: 4, ybit: 7, xbas: 3, xbit:3},\n//     {s:'Düzgün iyi konuşma yeteneği', sn:19, c:'NATIKA', ybas: 0, ybit: 5, xbas: 4, xbit:4},\n//     {s:'Hicap',sn:20, c:'AR', ybas: 2, ybit: 3, xbas: 5, xbit:5},\n//     {s:'Misket Limonu', sn:21, c:'LİM', ybas: 5, ybit: 7, xbas: 5, xbit:5},\n//     {s:'İkaz Uyar', sn:22, c:'İHTAR', ybas: 0, ybit: 4, xbas: 6, xbit:6},\n//     {s:'Kiloamper kısaltması', sn:23, c:'KA', ybas: 6, ybit: 7, xbas: 6, xbit:6},\n//     {s:'Tellür simgesi', sn:24, c:'TE', ybas: 0, ybit: 1, xbas: 7, xbit:7},\n//     {s:'İşitme organı', sn:25, c:'KULAK', ybas: 3, ybit: 7, xbas: 7, xbit:7}\n// ];\n\nconst questionsDataX = [\n    {s:'Soldan Sağa',sn:'', c:-1, ybas: -1, ybit: -1, xbas: -1, xbit:-1},\n    {s:'Geviş getirenlerden, Kongo’da bataklık ormanlarda yaşayan, büyük bir antilop boyunda, gövdesi kızıl kestane renginde, bacakları beyaz çizgili bir memeli hayvan', sn:1, c:'OKAPİ', ybas: 0, ybit: 0, xbas: 0, xbit:4},\n    {s:'İlave', sn:2, c:'EK', ybas: 0, ybit: 0, xbas: 6, xbit:7},\n    {s:'Erkek Kardeş', sn:3, c:'BİRADER', ybas: 1, ybit: 1, xbas: 0, xbit:6},\n    {s:'Bir organımız',sn:4 ,c:'EL', ybas: 2, ybit: 2, xbas: 0, xbit:1},\n    {s:'Bir Meyve', sn:5, c:'KİRAZ', ybas:2, ybit: 2, xbas: 3, xbit:7},\n    {s:'Küçük çan',c:'ZİL', sn:6, ybas: 3, ybit: 3, xbas: 0, xbit:2},\n    {s:'Bal koymaya yarayan küçük tekne', sn:7, c:'LAZA', ybas: 3, ybit: 3, xbas: 4, xbit:7},\n    {s:'Ad', sn:8, c:'İSİM', ybas: 4, ybit: 4, xbas: 0, xbit:3},\n    {s:'Eski Dilde Çöl', sn:9, c:'TİH', ybas: 4, ybit: 4, xbas: 5, xbit:7},\n    {s:'Mersin’in bir ilçesi', sn:10, c:'MUT', ybas: 5, ybit: 5, xbas: 2, xbit:4},\n    {s:'Lityum elementinin simgesi', sn:11, c:'Lİ', ybas: 5, ybit: 5, xbas: 6, xbit:7},\n    {s:'Mitoloji', sn:12, c:'ESATİR', ybas: 6, ybit: 6, xbas: 0, xbit:5},\n    {s:'Halk dilinde kayınbirader', sn:13, c:'İNİ', ybas: 7, ybit: 7, xbas: 1, xbit:3},\n    {s:'Kraliçe.', sn:14, c:'ECE', ybas: 7, ybit: 7, xbas: 5, xbit:7}\n\n];\n\nconst questionsDataY = [\n    {s: 'Yukarıdan Aşağıya', sn:'', c:-1, ybas: -1, ybit: -1, xbas: -1, xbit:-1},\n    {s:'Aşırı şişmanlık', sn:1, c:'OBEZİTE', ybas: 0, ybit: 6, xbas: 0, xbit:0},\n    {s:'Eski dilde reziller', sn:2, c:'ERAZİL', ybas: 0, ybit: 5, xbas: 6, xbit:6},\n    {s:'Bir ilimiz', sn:15, c:'KİLİS', ybas: 0, ybit: 4, xbas: 1, xbit:1},\n    {s:'Bir nota', sn:16, c:'Sİ', ybas: 6, ybit: 7, xbas: 1, xbit:1},\n    {s:'Hicap', sn:17, c:'AR', ybas: 0, ybit: 1, xbas: 2, xbit:2},\n    {s:'Gemi barınağı', sn:18, c:'LİMAN', ybas: 3, ybit: 7, xbas: 2, xbit:2},\n    {s:'Temiz', sn:19, c:'PAK', ybas: 0, ybit: 2, xbas: 3, xbit:3},\n    {s:'Yumuşak başlı, itaat eden',sn:20, c:'MUTİ', ybas: 4, ybit: 7, xbas: 3, xbit:3},\n    {s:'Şırnak’ın bir ilçesi', sn:21, c:'İDİL', ybas: 0, ybit: 3, xbas: 4, xbit:4},\n    {s:'Boru sesi', sn:22, c:'Tİ', ybas: 5, ybit: 6, xbas: 4, xbit:4},\n    {s:'Rütbesiz askerlerin tümü', sn:23, c:'ERAT', ybas: 1, ybit: 4, xbas: 5, xbit:5},\n    {s:'Bir nota', sn:24, c:'RE', ybas: 6, ybit: 7, xbas: 5, xbit:5},\n    {s:'Gerektiğinde kullanılmak için saklanan tahıl.', sn:25, c:'ZAHİRE', ybas: 2, ybit: 7, xbas: 7, xbit:7}\n];\n\nclass App extends Component {\n    inputs = Array(8).fill(null).map(()=>Array(8).fill(null));\n\n    state = {\n        enteredChars : [],\n        questionsX: questionsDataX,\n        questionsY: questionsDataY,\n        clickedXIndex : -1,\n        clickedYIndex : -1,\n        modelWindowOpen: false,\n    };\n\n    componentDidMount() {\n        const enteredChars = this.generateChars(questionsDataX, questionsDataY, false);\n\n        // const maxX = this.getMaxXNum(questionsDataX);\n        // const maxY = this.getMaxYNum(questionsDataY);\n\n        // this.inputs = Array(maxY).fill(null).map(()=>Array(maxX).fill(null))\n\n        this.setState(\n            {\n                //     [\n                //     ['L', 'A', 'R', 'E', 'N', 'J', 'İ', 'T'],\n                //     ['E', 'L', 'A', 'R', 'A', -1, 'H', 'E'],\n                //     ['S', 'A', 'K', 'A', 'T', 'A', 'T', -1],\n                //     ['E', 'M', 'A', -1, 'I', 'R', 'A', 'K'],\n                //     ['P', 'A', 'M', 'U', 'K', -1, 'R', 'U'],\n                //     ['A', 'N', -1, 'L', 'A', 'L', -1, 'L'],\n                //     ['S', 'A', 'P', 'A', -1, 'İ', 'K', 'A'],\n                //     ['E', -1, 'O', 'K', 'U', 'M', 'A', 'K']\n                // ],\n                enteredChars : enteredChars,\n                questionsX: questionsDataX,\n                questionsY: questionsDataY,\n                clickedXIndex : -1,\n                clickedYIndex : -1,\n            }\n        )\n    }\n\n    generateChars = (questionsDataX, questionsDataY) => {\n        const maxX = this.getMaxXNum(questionsDataX);\n        const maxY = this.getMaxYNum(questionsDataY);\n\n        let enteredChars = Array(maxY + 1).fill(-1).map(()=>Array(maxX + 1).fill(-1));\n\n        for(let i = 0; i < questionsDataX.length; i++){\n            const qData = questionsDataX[i];\n\n            if(qData.xbit !== -1 && qData.xbas !== -1 && qData.ybas !== -1 && qData.ybit !== -1){\n                const xbas = qData.xbas;\n                const xbit = qData.xbit;\n                const yIndex = qData.ybas;\n\n                let enteredXChars = enteredChars[yIndex];\n\n                for(let i = xbas; i <= xbit; i++){\n                    enteredXChars[i] = '';\n                }\n            }\n        }\n\n        for(let i = 0; i < questionsDataY.length; i++){\n            const qData = questionsDataY[i];\n\n            if(qData.xbit !== -1 && qData.xbas !== -1 && qData.ybas !== -1 && qData.ybit !== -1){\n                const ybas = qData.ybas;\n                const ybit = qData.ybit;\n                const xIndex = qData.xbas;\n\n                for(let i = ybas; i <= ybit; i++){\n                    enteredChars[i][xIndex] = '';\n                }\n            }\n        }\n\n        return enteredChars;\n    }\n\n    getMaxXNum = (questionsDataX) => {\n        let max=0;\n        for(let i = 0; i < questionsDataX.length; i++){\n            let qData = questionsDataX[i];\n            const xbit = qData.xbit;\n            max = xbit > max ? xbit : max;\n        }\n        return max;\n    }\n\n    getMaxYNum = (questionsDataY) => {\n        let max=0;\n        for(let i = 0; i < questionsDataY.length; i++){\n            let qData = questionsDataY[i];\n            const xbit = qData.ybit;\n            max = xbit > max ? xbit : max;\n        }\n        return max;\n    }\n\n    onFieldValueChange = (field, event) => {\n        const clickedXIndex = this.state.clickedXIndex;\n        const clickedYIndex = this.state.clickedYIndex;\n        const questionsX = this.state.questionsX;\n        const questionsY = this.state.questionsY;\n        let enteredChars = this.state.enteredChars;\n\n        const id = event.id;\n        const indexArr = id.split('-');\n        const indexY = parseInt(indexArr[0]);\n        const indexX = parseInt(indexArr[1]);\n\n        const enteredValue = event.value;\n        let length = enteredValue.length;\n        const value = length > 0 ? enteredValue !== 'i' ? enteredValue.substr(length - 1, length).toUpperCase() : 'İ' : '';\n        enteredChars[indexY][indexX] = value;\n\n        const focusedItemX = clickedXIndex > 0 && indexX + 1 < enteredChars[indexY].length ? indexX + 1 : indexX;\n        let focusedItemY = clickedYIndex > 0 && indexY + 1 < enteredChars[indexX].length ? indexY + 1 : indexY;\n        const resultChar = enteredChars[focusedItemY][focusedItemX];\n\n        if(value !== '' && resultChar !== -1){\n            const nextInput =  this.inputs[focusedItemY][focusedItemX];\n            nextInput.focus()\n        }\n\n        let newClickedXIndex = -1;\n        let newClickedYIndex = -1;\n        if(clickedXIndex > 0){\n            for(let i = 0; i < questionsX.length; i++){\n                const questionData = questionsX[i];\n                if(indexY === questionData.ybas && indexX <= questionData.xbit && indexX >= questionData.xbas){\n                    newClickedXIndex = i;\n                    break;\n                }\n            }\n\n        }else if(clickedYIndex > 0){\n            for(let i = 0; i < questionsY.length; i++){\n                const questionData = questionsY[i];\n                if(indexX === questionData.xbas && indexY <= questionData.ybit && indexY >= questionData.ybas){\n                    newClickedYIndex = i;\n                    break;\n                }\n            }\n        }\n\n\n\n        let allEqual  = true;\n        for(let i = 0; i < questionsX.length; i++){\n            let qData = questionsX[i];\n\n            let ybas = qData.ybas;\n            let xbas = qData.xbas;\n            let xbit = qData.xbit;\n\n            if(ybas === -1 || xbas === -1 || xbit === -1){\n                continue;\n            }\n\n            let enteredCharX = enteredChars[ybas];\n\n            let word = ''\n            for(let j = xbas; j <= xbit; j++){\n                word += enteredCharX[j];\n            }\n\n            allEqual = word === qData.c;\n            if(!allEqual){\n                break;\n            }\n        }\n\n        if(allEqual){\n            for(let i = 0; i < questionsY.length; i++){\n                let qData = questionsY[i];\n\n                let xbas = qData.xbas;\n                let ybas = qData.ybas;\n                let ybit = qData.ybit;\n\n                if(ybas === -1 || xbas === -1 || ybit === -1){\n                    continue;\n                }\n\n                let word = '';\n                for(let j = ybas; j <= ybit; j++){\n                    word += enteredChars[j][xbas];\n                }\n\n                allEqual = word === qData.c;\n                if(!allEqual){\n                    break;\n                }\n            }\n        }\n\n        this.setState({\n            enteredChars,\n            clickedXIndex : newClickedXIndex,\n            clickedYIndex : newClickedYIndex,\n            modelWindowOpen : allEqual\n        });\n\n    }\n\n    onXItemClicked = (index) => {\n        const enteredChars = this.state.enteredChars;\n        this.setState({\n            clickedXIndex : index,\n            clickedYIndex : -1,\n            enteredChars\n        })\n    }\n\n    onYItemClicked = (index) => {\n        const enteredChars = this.state.enteredChars;\n        this.setState({\n            clickedYIndex : index,\n            clickedXIndex : -1,\n            enteredChars\n        })\n    }\n\n    getCss = (indexX, indexY) => {\n        const clickedXIndex = this.state.clickedXIndex;\n        const clickedYIndex = this.state.clickedYIndex;\n        const enteredChars = this.state.enteredChars;\n        const questionsX = this.state.questionsX;\n        const questionsY = this.state.questionsY;\n\n\n        //Başarı kontolü x ekseni\n        let questionData = null;\n        for(let  i = 0; i < questionsX.length; i++){\n            let qData = questionsX[i];\n            if(qData.xbas <= indexX && qData.xbit >= indexX && indexY === qData.ybas){\n                questionData = qData;\n                break;\n            }\n        }\n\n        let word = '';\n        if(questionData != null){\n            const xArr =  enteredChars[questionData.ybas];\n            for(let i = questionData.xbas; i <= questionData.xbit; i++){\n                word += xArr[i];\n            }\n        }\n        if(questionData !== null && word === questionData.c){\n            return success;\n        }\n\n        //Başarı kontolü y ekseni\n        questionData = null;\n        for(let  i = 0; i < questionsY.length; i++){\n            let qData = questionsY[i];\n            if(qData.ybas <= indexY && qData.ybit >= indexY && indexX === qData.xbas){\n                questionData = qData;\n                break;\n            }\n        }\n\n        word = '';\n        if(questionData != null){\n            let yAxisArr = [];\n            for(let i = 0; i < enteredChars.length; i++){\n                yAxisArr.push(enteredChars[i][questionData.xbas])\n            }\n            for(let i = questionData.ybas; i <= questionData.ybit; i++){\n                word += yAxisArr[i];\n            }\n        }\n\n        if(questionData !== null && word === questionData.c){\n            return success;\n        }\n\n        if(clickedXIndex > 0){\n\n            if(questionsX[clickedXIndex] !== null && questionsX[clickedXIndex].xbas <= indexX && questionsX[clickedXIndex].xbit >= indexX && indexY === questionsX[clickedXIndex].ybas){\n                return selected;\n            }else{\n                return standart;\n            }\n        }else if(clickedYIndex > 0){\n            if(questionsY[clickedYIndex] !== null && questionsY[clickedYIndex].ybas <= indexY && questionsY[clickedYIndex].ybit >= indexY && indexX === questionsY[clickedYIndex].xbas){\n                return selected;\n            }else{\n                return standart;\n            }\n        }else{\n            return standart;\n        }\n    }\n\n    getTransparent = (indexX, indexY) => {\n        const clickedXIndex = this.state.clickedXIndex;\n        const clickedYIndex = this.state.clickedYIndex;\n        const questionsX = this.state.questionsX;\n        const questionsY = this.state.questionsY;\n        const enteredChars = this.state.enteredChars;\n\n        //Başarı kontrolü x ekseni\n        let questionData = null;\n        for(let  i = 0; i < questionsX.length; i++){\n            let qData = questionsX[i];\n            if(qData.xbas <= indexX && qData.xbit >= indexX && indexY === qData.ybas){\n                questionData = qData;\n                break;\n            }\n        }\n\n        let word = '';\n        if(questionData != null){\n            const xArr =  enteredChars[questionData.ybas];\n            for(let i = questionData.xbas; i <= questionData.xbit; i++){\n                word += xArr[i];\n            }\n        }\n\n        if(questionData !== null && word === questionData.c){\n            return success;\n        }\n\n        //Başarı kontrolü y ekseni\n        questionData = null;\n        for(let  i = 0; i < questionsY.length; i++){\n            let qData = questionsY[i];\n            if(qData.ybas <= indexY && qData.ybit >= indexY && indexX === qData.xbas){\n                questionData = qData;\n                break;\n            }\n        }\n\n        word = '';\n        if(questionData != null){\n            let yAxisArr = [];\n            for(let i = 0; i < enteredChars.length; i++){\n                yAxisArr.push(enteredChars[i][questionData.xbas])\n            }\n\n            for(let i = questionData.ybas; i <= questionData.ybit; i++){\n                word += yAxisArr[i];\n            }\n        }\n\n        if(questionData !== null && word === questionData.c){\n            return success;\n        }\n\n        if(clickedXIndex > 0){\n            if(questionsX[clickedXIndex] !== null && questionsX[clickedXIndex].xbas <= indexX && questionsX[clickedXIndex].xbit >= indexX && indexY === questionsX[clickedXIndex].ybas){\n                return true;\n            }else{\n                return false;\n            }\n        }else if(clickedYIndex > 0){\n            if(questionsY[clickedYIndex] !== null && questionsY[clickedYIndex].ybas <= indexY && questionsY[clickedYIndex].ybit >= indexY && indexX === questionsY[clickedYIndex].xbas){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            return false;\n        }\n    }\n\n    onModalWindowClose = () => {\n        this.setState({\n            modelWindowOpen : false\n        })\n    }\n\n    getLabelInfo = (indexX, indexY) => {\n        let result = false;\n\n        const questionsX = this.state.questionsX;\n        const questionsY = this.state.questionsY;\n\n        for(let i = 0; i < questionsX.length; i++){\n            const qData = questionsX[i];\n\n            let ybas = qData.ybas;\n            let xbas = qData.xbas;\n\n            if(xbas === -1 || ybas === -1){\n                continue;\n            }\n\n            if(ybas === indexY && xbas === indexX){\n                result = qData.sn;\n                break;\n            }\n        }\n\n        if(!result){\n            for(let i = 0; i < questionsY.length; i++){\n                const qData = questionsY[i];\n\n                let ybas = qData.ybas;\n                let xbas = qData.xbas;\n\n                if(xbas === -1 || ybas === -1){\n                    continue;\n                }\n\n                if(ybas === indexY && xbas === indexX){\n                    result = qData.sn;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    onInputFocus = (indexX, indexY) => {\n\n        const clickedXIndex = this.state.clickedXIndex;\n        const clickedYIndex = this.state.clickedYIndex;\n        let questionsX = this.state.questionsX;\n        let questionsY = this.state.questionsY;\n\n        let newClickedXIndex = -1;\n        let newClickedYIndex = -1;\n        if(clickedXIndex > 0){\n            for(let i = 0; i < questionsX.length; i++){\n                const questionData = questionsX[i];\n                if(indexY === questionData.ybas && indexX <= questionData.xbit && indexX >= questionData.xbas){\n                    newClickedXIndex = i;\n                    break;\n                }\n            }\n\n        }else if(clickedYIndex > 0){\n            for(let i = 0; i < questionsY.length; i++){\n                const questionData = questionsY[i];\n                if(indexX === questionData.xbas && indexY <= questionData.ybit && indexY >= questionData.ybas){\n                    newClickedYIndex = i;\n                    break;\n                }\n            }\n        }\n\n        newClickedXIndex = newClickedXIndex === clickedXIndex ? -1 : newClickedXIndex;\n        newClickedYIndex = newClickedYIndex === clickedYIndex ? -1 : newClickedYIndex;\n\n        this.setState({\n            clickedXIndex: newClickedXIndex,\n            clickedYIndex: newClickedYIndex\n        })\n\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <Grid columns={3} doubling>\n                    <Grid.Column>\n                        {this.state.enteredChars.map((dataY, indexY) => {\n                            return (\n                                <div>\n                                    {dataY.map((item, indexX) => {\n                                        return (\n                                            item === -1\n                                                ? <Input id={indexY + '-' + indexX} transparent style={black} value={''}/>\n                                                :\n                                                <Input\n                                                    label={this.getLabelInfo(indexX, indexY)}\n                                                    labelPosition='left corner'\n                                                    id={indexY + '-' + indexX}\n                                                    transparent={this.getTransparent(indexX, indexY)}\n                                                    style={this.getCss(indexX, indexY)}\n                                                    onChange={this.onFieldValueChange}\n                                                    // onFocus={this.onInputFocus.bind(this, indexX, indexY)}\n                                                    ref={(input) => { this.inputs[indexY][indexX] = input }}\n                                                    value={item}\n                                                />\n                                        )\n                                    })}\n\n                                </div>\n                            )\n                        })}\n                    </Grid.Column>\n                    <Grid.Column>\n\n                        <List>\n                            {this.state.questionsX.map((question, index) => {\n                                return(\n                                    this.state.clickedXIndex > 0 && index === this.state.clickedXIndex\n                                        ?\n                                        <List.Item onClick={this.onXItemClicked.bind(this, index)}>\n                                            <Label> {question.sn + ' ' + question.s} </Label>\n                                        </List.Item>\n                                        :\n                                        <List.Item onClick={this.onXItemClicked.bind(this, index)}>{question.sn + ' ' + question.s}</List.Item>\n                                )\n                            })}\n                        </List>\n\n                    </Grid.Column>\n                    <Grid.Column>\n\n                        <List>\n                            {this.state.questionsY.map((question, index) => {\n                                return(\n                                    this.state.clickedYIndex > 0 && index === this.state.clickedYIndex\n                                        ?\n                                        <List.Item onClick={this.onYItemClicked.bind(this, index)}>\n                                            <Label> {question.sn + ' ' + question.s} </Label>\n                                        </List.Item>\n                                        :\n                                        <List.Item onClick={this.onYItemClicked.bind(this, index)}>{question.sn + ' ' + question.s}</List.Item>\n                                )\n\n                            })}\n                        </List>\n\n                    </Grid.Column>\n                </Grid>\n\n                <Modal  open={this.state.modelWindowOpen}\n                        centered={false}\n                        onClose={this.onModalWindowClose}\n                        size={'tiny'}\n                >\n                    <Modal.Header>Çözüldü</Modal.Header>\n                    <Modal.Content>\n                        <Modal.Description>\n                            <p>\n                                Bulmaca çözüldü. Tebrikler\n                            </p>\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n\n            </div>\n        );\n    }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}